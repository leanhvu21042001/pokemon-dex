{"version":3,"file":"static/js/999.e25f5f81.chunk.js","mappings":"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","sources":["pages/Detail/components/AbilityOfPokemon/index.js","pages/Detail/components/AbilityOfPokemon/constants.js","pages/Detail/components/VarietyOfPokemon/index.js","pages/Detail/Detail.js","utils/toCamelCase.js","services/pokemonService.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\n\nimport { LANG } from './constants'\nimport pokemonService from 'services/pokemonService'\nimport { ErrorFetchDataContext } from 'contexts/ErrorFetchDataContextProvider'\n\nconst AbilityOfPokemon = ({ url }) => {\n  const [effect, setEffect] = useState('')\n\n  const { handleErrorFetchData } = useContext(ErrorFetchDataContext)\n\n  useEffect(() => {\n    pokemonService\n      .getAbilityOfPokemon(url)\n      .then(effectEntries => {\n        const effectEntriesElements = effectEntries.map(effectEntry => {\n          if (effectEntry?.language?.name === LANG) {\n            return <li key={effectEntry.id}>{effectEntry.effect}</li>\n          }\n          return null\n        })\n        setEffect(effectEntriesElements)\n      })\n      .catch(() => {\n        handleErrorFetchData()\n      })\n  }, [url])\n\n  return <React.Fragment>{effect}</React.Fragment>\n}\nexport default AbilityOfPokemon\n","export const LANG = 'en'\n","import { Link } from 'react-router-dom'\nimport { useContext, useEffect, useState } from 'react'\n\nimport pokemonService from 'services/pokemonService'\nimport { ErrorFetchDataContext } from 'contexts/ErrorFetchDataContextProvider'\n\nimport './styles.css'\nimport defaultImagePokemon96x96 from 'assets/images/defaultImagePokemon96x96.png'\n\nconst VarietyOfPokemon = ({ pokemon, index }) => {\n  // save state detail pokemon.\n  const [detailPokemon, setDetailPokemon] = useState({})\n\n  const { handleErrorFetchData } = useContext(ErrorFetchDataContext)\n\n  // get detail of pokemon.\n  useEffect(() => {\n    if (pokemon?.url) {\n      const idSplitFromUrl = `${pokemon?.url}`\n        .match(/\\/\\d+\\//g)\n        .join('')\n        .replaceAll('/', '')\n        .trim()\n      pokemonService\n        .getOnePokemon(idSplitFromUrl)\n        .then(data => {\n          setDetailPokemon(data)\n        })\n        .catch(() => {\n          handleErrorFetchData()\n        })\n    }\n  }, [pokemon])\n\n  // render ui.\n  return (\n    <div className=\"col-4 text-center\">\n      <div>#{index + 1}</div>\n      <Link to={`/detail/${detailPokemon?.id}`}>\n        {detailPokemon?.sprites?.frontDefault &&\n        detailPokemon?.sprites?.backDefault ? (\n          <img\n            src={`${\n              detailPokemon?.sprites?.frontDefault ||\n              detailPokemon?.sprites?.backDefault\n            }`}\n            alt={`${detailPokemon?.name}`}\n          />\n        ) : (\n          <img src={defaultImagePokemon96x96} alt=\"default-pokemon-img\" />\n        )}\n      </Link>\n\n      <Link\n        className=\"d-block h5 pokemon-variety\"\n        to={`/detail/${detailPokemon?.id}`}\n      >\n        {detailPokemon?.name}\n      </Link>\n    </div>\n  )\n}\n\nexport default VarietyOfPokemon\n","import { Link, useParams } from 'react-router-dom'\nimport React, { useContext, useEffect, useState } from 'react'\n\nimport pokemonService from 'services/pokemonService'\nimport { ErrorFetchDataContext } from 'contexts/ErrorFetchDataContextProvider'\n\nimport AbilityOfPokemon from './components/AbilityOfPokemon'\nimport VarietyOfPokemon from './components/VarietyOfPokemon'\n\nimport './styles.css'\nimport defaultImagePokemon636x636 from 'assets/images/defaultImagePokemon636x636.png'\n\nexport default function Detail() {\n  const params = useParams()\n\n  const id = params.id || 1\n\n  const { handleErrorFetchData } = useContext(ErrorFetchDataContext)\n\n  // save state detail pokemon.\n  const [detailPokemon, setDetailPokemon] = useState({})\n  const [evolutionChain, setEvolutionChain] = useState({})\n\n  useEffect(() => {\n    pokemonService\n      .getOnePokemon(id)\n      .then(data => {\n        setDetailPokemon(data)\n      })\n      .catch(() => {\n        handleErrorFetchData()\n      })\n  }, [id])\n\n  useEffect(() => {\n    if (detailPokemon?.species?.url !== undefined) {\n      pokemonService\n        .getEvolutionChain(detailPokemon?.species?.url)\n        .then(data => {\n          setEvolutionChain(data)\n        })\n        .catch(() => {\n          handleErrorFetchData()\n        })\n    }\n  }, [detailPokemon])\n\n  return (\n    <div className=\"container mb-4\">\n      {/* Logo */}\n      <h1 className=\"text-center mb-5\" id=\"logo-page\">\n        Pokemon Dex\n      </h1>\n\n      <div className=\"row mb-1\">\n        <div className=\"col-md-4\">\n          {detailPokemon?.sprites?.frontDefault &&\n          detailPokemon?.sprites?.backDefault ? (\n            <img\n              src={`${\n                detailPokemon?.sprites?.frontDefault ||\n                detailPokemon?.sprites?.backDefault\n              }`}\n              className=\"img-fluid\"\n              alt={detailPokemon?.name}\n              width=\"100%\"\n              height=\"100%\"\n            />\n          ) : (\n            <img\n              src={defaultImagePokemon636x636}\n              className=\"img-fluid\"\n              alt=\"default-pokemon-img\"\n              width=\"100%\"\n              height=\"100%\"\n            />\n          )}\n        </div>\n\n        <div className=\"col-md-8 pts-content-b\">\n          <h3 className=\"title\">Bio</h3>\n          <p>\n            <b>Name:</b> {`${detailPokemon?.name}`.toUpperCase()}\n          </p>\n          <p>\n            <b>Types: </b>\n            {detailPokemon?.types}\n          </p>\n          <p>\n            <b>Base experience:</b> {detailPokemon?.baseExperience}\n          </p>\n          <p>\n            <span>\n              <b>Weight:</b> {detailPokemon?.weight}kg\n            </span>\n            {` `}\n            <span>\n              <b>Height:</b> {detailPokemon?.height}m\n            </span>\n          </p>\n          <div className=\"pts-content-sm\">\n            <b>Effect entries: </b>\n            <ul>\n              {detailPokemon?.abilities &&\n                Object.values(detailPokemon?.abilities).map(ability => {\n                  if (ability?.isHidden === false) {\n                    return (\n                      <AbilityOfPokemon\n                        key={ability?.id}\n                        url={ability?.ability?.url}\n                      />\n                    )\n                  }\n                  return null\n                })}\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div className=\"row mb-5\">\n        <div className=\"col-md-6\">\n          <h3 className=\"title\">Stats</h3>\n          <div className=\"row pts-content-sm-l text-center\">\n            {detailPokemon?.stats &&\n              Object.values(detailPokemon.stats).map((stat, index) => (\n                <div className=\"col-4 d-flex flex-column mt-3\" key={stat.id}>\n                  <span>\n                    <strong>{stat.stat.name}</strong>\n                  </span>\n                  <span>{stat.baseStat}</span>\n                </div>\n              ))}\n          </div>\n        </div>\n        <div className=\"col-md-6\">\n          <h3 className=\"title\">Evolution</h3>\n          <div className=\"row pts-content-sm\">\n            {evolutionChain &&\n              Object.values(evolutionChain).map((chain, index) => {\n                if (chain?.name && chain?.url) {\n                  return (\n                    <VarietyOfPokemon\n                      key={chain.id}\n                      pokemon={chain}\n                      index={index}\n                    />\n                  )\n                }\n                return null\n              })}\n          </div>\n        </div>\n      </div>\n      <hr className=\"mb-5\" />\n      <Link to={'/home'} className=\"btn btn-purple pts-content-sm\">\n        Back home\n      </Link>\n    </div>\n  )\n}\n","export default function toCamelCase(objectInput) {\n  // copy object\n  let returnNewObject = objectInput\n\n  // check is value valid.\n  if (!returnNewObject) {\n    return returnNewObject\n  }\n  // value is a object\n  else if (typeof objectInput === 'object') {\n    // if current object an array, re-call toCamelCase function.\n    if (objectInput instanceof Array) {\n      returnNewObject = objectInput.map(toCamelCase)\n    }\n    // if not an array\n    else {\n      returnNewObject = {}\n      for (let key in objectInput) {\n        // if key has on object\n        if (objectInput.hasOwnProperty(key)) {\n          // remove snake case and uppercase first letter beside snake case\n          const newKey = key.replace(/(_\\w)/g, k => k[1].toUpperCase())\n          // convert nested object to camel case\n          returnNewObject[newKey] = toCamelCase(objectInput[key])\n        }\n      }\n    }\n  }\n\n  // all keys are camel case\n  return returnNewObject\n}\n","import axios from 'axios'\nimport { nanoid } from 'nanoid'\nimport { toCamelCase } from 'utils'\n\nclass PokemonService {\n  async getOnePokemon(id) {\n    return axios\n      .get(`https://pokeapi.co/api/v2/pokemon/${id}/`)\n      .then(response => response.data)\n      .then(data => {\n        const types = Object.values(data?.types).map(type => type.type.name)\n        data.types = types.join(', ') + '.'\n        // hectograms to kg.\n        data.weight = data?.weight / 10\n        // decimetres to m.\n        data.height = data?.height / 10\n\n        // add object key.\n        data.abilities = data?.abilities.map(item => {\n          return { ...item, id: nanoid(5) }\n        })\n\n        // add object key.\n        data.stats = data?.stats.map(item => {\n          return { ...item, id: nanoid(5) }\n        })\n\n        // set data for state.\n        return toCamelCase(data)\n      })\n  }\n\n  async getEvolutionChain(url) {\n    const species = await axios.get(url)\n\n    const resEvolutionChain = await axios.get(\n      `${toCamelCase(species.data).evolutionChain?.url}`\n    )\n    const data = toCamelCase(resEvolutionChain?.data).chain\n\n    const speciesOne = data.species.name\n    const urlOfSpeciesOne = data.species.url\n\n    const speciesTwo = data.evolvesTo[0]?.species.name\n    const urlOfSpeciesTwo = data.evolvesTo[0]?.species.url\n\n    const speciesThree = data.evolvesTo[0]?.evolvesTo[0]?.species.name\n    const urlOfSpeciesThree = data.evolvesTo[0]?.evolvesTo[0]?.species.url\n\n    return [\n      { id: nanoid(5), name: speciesOne, url: urlOfSpeciesOne },\n      { id: nanoid(5), name: speciesTwo, url: urlOfSpeciesTwo },\n      { id: nanoid(5), name: speciesThree, url: urlOfSpeciesThree }\n    ]\n  }\n\n  async getAbilityOfPokemon(url) {\n    // get Ability Of Pokemon.\n    return (\n      axios\n        .get(url)\n        // get effect entries.\n        .then(response => {\n          const effectEntries = toCamelCase(response.data).effectEntries\n          // add object key.\n          return effectEntries.map(effectEntry => {\n            return { ...effectEntry, id: nanoid(5) }\n          })\n        })\n    )\n  }\n\n  async getPokemonWithLimit(offset = 0, limit = 20) {\n    const url = `https://pokeapi.co/api/v2/pokemon?offset=${offset}&limit=${limit}`\n    return axios.get(url).then(response => response.data?.results)\n  }\n\n  async searchPokemonByType(keyword) {\n    const trimmedKeyword = keyword.toString().trim()\n\n    return (\n      axios\n        .get('https://pokeapi.co/api/v2/type/')\n        .then(res => res.data.results)\n        .then(types => {\n          return types.filter(type => {\n            return type.name.trim().includes(trimmedKeyword)\n          })\n        })\n        // filter type and get all pokemon with type name.\n        .then(resultTypeFilter => {\n          return axios\n            .get(`${resultTypeFilter[0]?.url}`)\n            .then(response => response.data)\n            .then(typeDetail => {\n              const result = typeDetail?.pokemon.map(pokemon => pokemon.pokemon)\n              // set result filter for display pokemon.\n              return result\n            })\n        })\n    )\n  }\n}\n\nexport default new PokemonService()\n"],"names":["url","useState","effect","setEffect","handleErrorFetchData","useContext","ErrorFetchDataContext","useEffect","pokemonService","then","effectEntries","effectEntriesElements","map","effectEntry","language","name","id","catch","pokemon","index","detailPokemon","setDetailPokemon","idSplitFromUrl","match","join","replaceAll","trim","data","className","to","sprites","frontDefault","backDefault","src","alt","defaultImagePokemon96x96","Detail","useParams","evolutionChain","setEvolutionChain","undefined","species","width","height","defaultImagePokemon636x636","toUpperCase","types","baseExperience","weight","abilities","Object","values","ability","isHidden","stats","stat","baseStat","chain","toCamelCase","objectInput","returnNewObject","Array","key","hasOwnProperty","replace","k","PokemonService","axios","response","type","item","nanoid","resEvolutionChain","speciesOne","urlOfSpeciesOne","speciesTwo","evolvesTo","urlOfSpeciesTwo","speciesThree","urlOfSpeciesThree","offset","limit","results","keyword","trimmedKeyword","toString","res","filter","includes","resultTypeFilter","typeDetail"],"sourceRoot":""}