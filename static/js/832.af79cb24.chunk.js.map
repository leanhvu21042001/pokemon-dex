{"version":3,"file":"static/js/832.af79cb24.chunk.js","mappings":"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","sources":["../javascript/esm|/home/leanhvu/gitleanhvu/of-raymond/pokemon-dex/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../javascript/esm|/home/leanhvu/gitleanhvu/of-raymond/pokemon-dex/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../javascript/esm|/home/leanhvu/gitleanhvu/of-raymond/pokemon-dex/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../javascript/esm|/home/leanhvu/gitleanhvu/of-raymond/pokemon-dex/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","pages/Home/components/CardPokemon/index.js","pages/Home/constants.js","pages/Home/Home.js","hooks/useWindowPosition.js","utils/toCamelCase.js","services/pokemonService.js"],"sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { Link } from 'react-router-dom'\nimport { useContext, useEffect, useState } from 'react'\n\nimport pokemonService from 'services/pokemonService'\nimport { ErrorFetchDataContext } from 'contexts/ErrorFetchDataContextProvider'\n\nimport defaultImagePkemon276x276 from 'assets/images/defaultImagePkemon276x276.png'\n\n// Sub component for homepage render Pokemon Card.\nexport default function CardPokemon({ pokemon }) {\n  // save state detail pokemon.\n  const [detailPokemon, setDetailPokemon] = useState(null)\n  const { handleErrorFetchData } = useContext(ErrorFetchDataContext)\n\n  useEffect(() => {\n    const idSplitFromUrl = `${pokemon?.url}`\n      .match(/\\/\\d+\\//g)\n      .join('')\n      .replaceAll('/', '')\n      .trim()\n\n    pokemonService\n      .getOnePokemon(idSplitFromUrl)\n      .then(data => {\n        setDetailPokemon(data)\n      })\n      .catch(() => {\n        handleErrorFetchData()\n      })\n  }, [pokemon])\n\n  return (\n    <div className=\"col-xl-3 col-lg-4 col-md-6 mt-4\">\n      <div className=\"card card-pokemon\">\n        {detailPokemon?.sprites?.frontDefault &&\n        detailPokemon?.sprites?.backDefault ? (\n          <img\n            src={`${\n              detailPokemon?.sprites?.frontDefault ||\n              detailPokemon?.sprites?.backDefault\n            }`}\n            className=\"card-img-top\"\n            alt={`${detailPokemon?.name}`}\n          />\n        ) : (\n          <img\n            src={defaultImagePkemon276x276}\n            className=\"img-fluid\"\n            alt={pokemon?.name}\n          />\n        )}\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{detailPokemon?.name}</h5>\n          <p className=\"card-text\">\n            <b>Types</b>: {detailPokemon?.types}\n          </p>\n          <div className=\"d-flex justify-content-end\">\n            <Link\n              to={`/pokemon-dex/detail/${detailPokemon?.id}`}\n              className=\"btn btn-purple\"\n            >\n              Detail\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","export const searchMode = {\n  NAME: 'search_by_name',\n  TYPE: 'search_by_type'\n}\n\nexport const LIMIT_POKEMONS_LIST_COUNT = 1118\n","import { nanoid } from 'nanoid'\nimport React, { useContext, useEffect, useRef, useState } from 'react'\n\nimport pokemonService from 'services/pokemonService'\nimport useWindowPosition from 'hooks/useWindowPosition'\nimport { ErrorFetchDataContext } from 'contexts/ErrorFetchDataContextProvider'\n\nimport CardPokemon from './components/CardPokemon'\nimport { LIMIT_POKEMONS_LIST_COUNT, searchMode } from './constants'\n\nimport './styles.css'\n\nexport default function Home() {\n  // state search keywords.\n  const [keywords, setKeywords] = useState('')\n  const [searchType, setSearchType] = useState({ type: searchMode.NAME })\n\n  const { handleErrorFetchData } = useContext(ErrorFetchDataContext)\n\n  // save all pokemons.\n  const [listPokemon, setListPokemon] = useState([])\n  // Pokemon for display to screen.\n  const [listPokemonDisplay, setListPokemonDisplay] = useState([])\n\n  const [offset, setOffset] = useState(0)\n  // Hook for get scroll position.\n  const pageScrollData = useWindowPosition()\n  const divListPokemonRef = useRef()\n\n  // Running when scroll, to check is end of data. For call new data.\n  useEffect(() => {\n    const contentHeight = divListPokemonRef.current.offsetHeight\n    const y = pageScrollData + window.innerHeight\n\n    if (y > contentHeight && pageScrollData > 0 && contentHeight > 0) {\n      setOffset(prev => prev + 20)\n    }\n  }, [pageScrollData])\n\n  // Fetch all pokemons on first load.\n  useEffect(() => {\n    pokemonService\n      .getPokemonWithLimit(0, LIMIT_POKEMONS_LIST_COUNT)\n      .then(resListPokemon => {\n        const result = resListPokemon.map(pokemon => ({\n          ...pokemon,\n          id: nanoid(5)\n        }))\n        setListPokemon(result)\n      })\n      .catch(() => {\n        handleErrorFetchData()\n      })\n  }, [])\n\n  // Slice pokemons when offset changed.\n  useEffect(() => {\n    const pokemonSlice = listPokemon.slice(offset, offset + 20)\n    setListPokemonDisplay(preListPokemon => [\n      ...preListPokemon,\n      ...pokemonSlice\n    ])\n  }, [listPokemon, offset])\n\n  // Start search when form submit.\n  const handleSubmitSearchForm = e => {\n    e.preventDefault()\n    if (keywords.trim().length > 0) {\n      // check is search by NAME or TYPE\n      if (searchType.type === searchMode.NAME) {\n        const resultFilter = listPokemon.filter(pokemon => {\n          return pokemon.name.trim().includes(`${keywords}`.trim())\n        })\n        setListPokemonDisplay(resultFilter)\n      }\n      if (searchType.type === searchMode.TYPE) {\n        // get all types.\n        pokemonService\n          .searchPokemonByType(keywords)\n          .then(resListPokemon => {\n            const result = resListPokemon.map(pokemon => ({\n              ...pokemon,\n              id: nanoid(5)\n            }))\n            setListPokemonDisplay(result)\n          })\n          .catch(() => {\n            handleErrorFetchData()\n          })\n      }\n    }\n  }\n\n  const handleInputSearchChange = e => {\n    setKeywords(e.target.value)\n    // reset pokemons while input search form is empty.\n    if (e.target.value.trim() === '') {\n      const pokemonSlice = listPokemon.slice(0, 0 + 20)\n      setListPokemonDisplay(pokemonSlice)\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      {/* Logo */}\n      <h1 className=\"text-center mb-5\" id=\"logo-page\">\n        Pokemon Dex\n      </h1>\n      {/* ! Search Form*/}\n      <form id=\"form-search\" className=\"mb-5\" onSubmit={handleSubmitSearchForm}>\n        <div className=\"row form-search-rs\">\n          <div className=\"col-md-10\">\n            <label htmlFor=\"search-pokemon\" className=\"form-label\">\n              Search\n            </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"search-pokemon\"\n              aria-describedby=\"search-pokemon\"\n              onChange={handleInputSearchChange}\n            />\n          </div>\n\n          <div className=\"col-md-2 mt-sm-3 d-flex align-items-end\">\n            <select\n              className=\"form-select\"\n              aria-label=\"Default select example\"\n              defaultValue={searchMode.NAME}\n              onChange={e => setSearchType({ type: e.target.value })}\n            >\n              <option value={searchMode.NAME}>Name</option>\n              <option value={searchMode.TYPE}>Type</option>\n            </select>\n          </div>\n        </div>\n      </form>\n\n      {/* List Carts Of Pokemon */}\n      <div className=\"row mb-5\" id=\"list-of-pokemon\" ref={divListPokemonRef}>\n        {listPokemonDisplay.map(pokemon => {\n          return <CardPokemon key={pokemon?.id} pokemon={pokemon} />\n        })}\n      </div>\n    </div>\n  )\n}\n","import { useLayoutEffect, useState } from 'react'\n\nexport default function useWindowPosition() {\n  const [scrollPosition, setPosition] = useState(0)\n  useLayoutEffect(() => {\n    function updatePosition() {\n      setPosition(window.pageYOffset)\n    }\n    window.addEventListener('scroll', updatePosition)\n    updatePosition()\n    return () => window.removeEventListener('scroll', updatePosition)\n  }, [])\n  return scrollPosition\n}\n","export default function toCamelCase(objectInput) {\n  // copy object\n  let returnNewObject = objectInput\n\n  // check is value valid.\n  if (!returnNewObject) {\n    return returnNewObject\n  }\n  // value is a object\n  else if (typeof objectInput === 'object') {\n    // if current object an array, re-call toCamelCase function.\n    if (objectInput instanceof Array) {\n      returnNewObject = objectInput.map(toCamelCase)\n    }\n    // if not an array\n    else {\n      returnNewObject = {}\n      for (let key in objectInput) {\n        // if key has on object\n        if (objectInput.hasOwnProperty(key)) {\n          // remove snake case and uppercase first letter beside snake case\n          const newKey = key.replace(/(_\\w)/g, k => k[1].toUpperCase())\n          // convert nested object to camel case\n          returnNewObject[newKey] = toCamelCase(objectInput[key])\n        }\n      }\n    }\n  }\n\n  // all keys are camel case\n  return returnNewObject\n}\n","import axios from 'axios'\nimport { nanoid } from 'nanoid'\nimport { toCamelCase } from 'utils'\n\nclass PokemonService {\n  async getOnePokemon(id) {\n    return axios\n      .get(`https://pokeapi.co/api/v2/pokemon/${id}/`)\n      .then(response => response.data)\n      .then(data => {\n        const types = Object.values(data?.types).map(type => type.type.name)\n        data.types = types.join(', ') + '.'\n        // hectograms to kg.\n        data.weight = data?.weight / 10\n        // decimetres to m.\n        data.height = data?.height / 10\n\n        // add object key.\n        data.abilities = data?.abilities.map(item => {\n          return { ...item, id: nanoid(5) }\n        })\n\n        // add object key.\n        data.stats = data?.stats.map(item => {\n          return { ...item, id: nanoid(5) }\n        })\n\n        // set data for state.\n        return toCamelCase(data)\n      })\n  }\n\n  async getEvolutionChain(url) {\n    const species = await axios.get(url)\n\n    const resEvolutionChain = await axios.get(\n      `${toCamelCase(species.data).evolutionChain?.url}`\n    )\n    const data = toCamelCase(resEvolutionChain?.data).chain\n\n    const speciesOne = data.species.name\n    const urlOfSpeciesOne = data.species.url\n\n    const speciesTwo = data.evolvesTo[0]?.species.name\n    const urlOfSpeciesTwo = data.evolvesTo[0]?.species.url\n\n    const speciesThree = data.evolvesTo[0]?.evolvesTo[0]?.species.name\n    const urlOfSpeciesThree = data.evolvesTo[0]?.evolvesTo[0]?.species.url\n\n    return [\n      { id: nanoid(5), name: speciesOne, url: urlOfSpeciesOne },\n      { id: nanoid(5), name: speciesTwo, url: urlOfSpeciesTwo },\n      { id: nanoid(5), name: speciesThree, url: urlOfSpeciesThree }\n    ]\n  }\n\n  async getAbilityOfPokemon(url) {\n    // get Ability Of Pokemon.\n    return (\n      axios\n        .get(url)\n        // get effect entries.\n        .then(response => {\n          const effectEntries = toCamelCase(response.data).effectEntries\n          // add object key.\n          return effectEntries.map(effectEntry => {\n            return { ...effectEntry, id: nanoid(5) }\n          })\n        })\n    )\n  }\n\n  async getPokemonWithLimit(offset = 0, limit = 20) {\n    const url = `https://pokeapi.co/api/v2/pokemon?offset=${offset}&limit=${limit}`\n    return axios.get(url).then(response => response.data?.results)\n  }\n\n  async searchPokemonByType(keyword) {\n    const trimmedKeyword = keyword.toString().trim()\n\n    return (\n      axios\n        .get('https://pokeapi.co/api/v2/type/')\n        .then(res => res.data.results)\n        .then(types => {\n          return types.filter(type => {\n            return type.name.trim().includes(trimmedKeyword)\n          })\n        })\n        // filter type and get all pokemon with type name.\n        .then(resultTypeFilter => {\n          return axios\n            .get(`${resultTypeFilter[0]?.url}`)\n            .then(response => response.data)\n            .then(typeDetail => {\n              const result = typeDetail?.pokemon.map(pokemon => pokemon.pokemon)\n              // set result filter for display pokemon.\n              return result\n            })\n        })\n    )\n  }\n}\n\nexport default new PokemonService()\n"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","CardPokemon","pokemon","useState","detailPokemon","setDetailPokemon","handleErrorFetchData","useContext","ErrorFetchDataContext","useEffect","idSplitFromUrl","url","match","join","replaceAll","trim","pokemonService","then","data","catch","className","sprites","frontDefault","backDefault","src","alt","name","defaultImagePkemon276x276","types","to","id","searchMode","Home","keywords","setKeywords","type","searchType","setSearchType","listPokemon","setListPokemon","listPokemonDisplay","setListPokemonDisplay","offset","setOffset","pageScrollData","scrollPosition","setPosition","useLayoutEffect","updatePosition","window","pageYOffset","addEventListener","removeEventListener","useWindowPosition","divListPokemonRef","useRef","contentHeight","current","offsetHeight","innerHeight","prev","resListPokemon","result","map","nanoid","pokemonSlice","slice","preListPokemon","onSubmit","e","preventDefault","length","resultFilter","filter","includes","htmlFor","onChange","target","value","defaultValue","ref","toCamelCase","objectInput","returnNewObject","key","hasOwnProperty","replace","k","toUpperCase","PokemonService","axios","response","Object","values","weight","height","abilities","item","stats","species","evolutionChain","resEvolutionChain","chain","speciesOne","urlOfSpeciesOne","speciesTwo","evolvesTo","urlOfSpeciesTwo","speciesThree","urlOfSpeciesThree","effectEntries","effectEntry","limit","results","keyword","trimmedKeyword","toString","res","resultTypeFilter","typeDetail"],"sourceRoot":""}